# Windsurf Rules

</collaboration_protocol>

Before modifying, adding, or deleting any code:

Provide a brief overview of which files/modules will be affected.

Explain why the change is necessary and what alternatives exist.

End with an explicit question: “Would you like me to proceed with this?”
→ Always wait for the user's response before making the change.

Do not write or update code inline within explanations; use clear code blocks.

Only update the modules that have been explicitly approved in the user's latest response.

<coding_guidelines>

Backend: TypeScript (Node.js + Fastify), Frontend: React/Remix.

Maintain a strict module structure (auth, billing, inventory, etc.); no hidden dependencies.

Prefer early return statements and a maximum of 2 levels of nesting.

Document all new functions/classes using JSDoc.

Write tests (unit + integration) for new logic before merging to production.

</coding_guidelines>

<cloud_architecture>

All code is expected to run in containers on Kubernetes (GitOps-based deployment).

Infrastructure-as-code (Terraform/Pulumi) is maintained in a separate repository.

Use environment variables (12-Factor) and a Secret Store (Vault) – never hardcoded secrets.

</cloud_architecture>

<commit_policy>

Use conventional commit messages (type(scope): subject).

Include “BREAKING CHANGE:” in the body if the API or database schema is broken.

</commit_policy>
